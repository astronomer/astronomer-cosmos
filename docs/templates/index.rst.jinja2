..
  This file is autogenerated by `docs/scripts/generate_mappings.py`. Do not edit by hand.

.. toctree::
   :caption: Profiles

   self
   {% for profile in profile_mapping_names %}{{ profile }}
   {% endfor %}

Profiles Overview
==========================

Cosmos supports two methods of authenticating with your database:

- using your own dbt profiles.yml file
- using Airflow connections via Cosmos' profile mappings

If you're already interacting with your database from Airflow and have a connection set up, it's recommended
to use a profile mapping to translate that Airflow connection to a dbt profile. This is because it's easier to
maintain a single connection object in Airflow than it is to maintain a connection object in Airflow and a dbt profile
in your dbt project.

If you don't already have an Airflow connection, or if there's no readily-available profile mapping for your database,
you can use your own dbt profiles.yml file.

Regardless of which method you use, you'll need to tell Cosmos which profile and target name it should use. Profile config
is set in the ``cosmos.config.ProfileConfig`` object, like so:

.. code-block:: python

    from cosmos.config import ProfileConfig

    profile_config = ProfileConfig(
        profile_name="my_profile_name",
        target_name="my_target_name",

        # choose one of the following
        profile_mapping=...,
        profiles_yml_filepath=...,
    )

    dag = DbtDag(profile_config=profile_config, ...)



Using a profile mapping
++++++++++++++++++++++++++++++++++++

Profile mappings are utilities provided by Cosmos that translate Airflow connections to dbt profiles. This means that
you can use the same connection objects you use in Airflow to authenticate with your database in dbt. To do so, there's
a class in Cosmos for each Airflow connection to dbt profile mapping.

You can find the available profile mappings on the left-hand side of this page. Each profile mapping is imported from
``cosmos.profiles`` and takes two arguments:

* ``conn_id``: the Airflow connection ID to use.
* ``profile_args``: a dictionary of additional arguments to pass to the dbt profile. This is useful for specifying
  values that are not in the Airflow connection. This also acts as an override for any values that are in the Airflow
  connection but should be overridden.

Below is an example of using the Snowflake profile mapping, where we take most arguments from the Airflow connection
but override the ``database`` and ``schema`` values:

.. code-block:: python

    from cosmos.profiles import SnowflakeUserPasswordProfileMapping

    profile_config = ProfileConfig(
        profile_name="my_profile_name",
        target_name="my_target_name",
        profile_mapping=SnowflakeUserPasswordProfileMapping(
            conn_id="my_snowflake_conn_id",
            profile_args={
                "database": "my_snowflake_database",
                "schema": "my_snowflake_schema",
            },
        ),
    )

    dag = DbtDag(profile_config=profile_config, ...)

Note that when using a profile mapping, the profiles.yml file gets generated with the profile name and target name
you specify in ``ProfileConfig``.


Using your own profiles.yml file
++++++++++++++++++++++++++++++++++++

If you don't want to use Airflow connections, or if there's no readily-available profile mapping for your database,
you can use your own dbt profiles.yml file. To do so, you'll need to pass the path to your profiles.yml file to the
``profiles_yml_filepath`` argument in ``ProfileConfig``.

For example, the code snippet below points Cosmos at a ``profiles.yml`` file and instructs Cosmos to use the
``my_snowflake_profile`` profile and ``dev`` target:

.. code-block:: python

    from cosmos.config import ProfileConfig

    profile_config = ProfileConfig(
        profile_name="my_snowflake_profile",
        target_name="dev",
        profiles_yml_filepath="/path/to/profiles.yml",
    )

    dag = DbtDag(profile_config=profile_config, ...)
